import { Code, NewTokenData, RefreshToken, TokenData, TokenId, TokenInfo } from '@atproto/oauth-provider';
import { Selectable } from 'kysely';
import { AccountDb, Token } from '../db';
import { ActorAccount } from './account';
import { SelectableDeviceAccount } from './device-account';
type LeftJoined<T> = {
    [K in keyof T]: null | T[K];
};
export type ActorAccountToken = Selectable<ActorAccount> & Selectable<Omit<Token, 'id' | 'did'>> & LeftJoined<SelectableDeviceAccount>;
export declare const toTokenInfo: (row: ActorAccountToken, audience: string) => TokenInfo;
export declare const createQB: (db: AccountDb, tokenId: TokenId, data: TokenData, refreshToken?: RefreshToken) => import("kysely").InsertQueryBuilder<import("../db").DatabaseSchema, "token", import("kysely").InsertResult>;
export declare const forRotateQB: (db: AccountDb, id: TokenId) => import("kysely/dist/cjs/parser/select-parser").QueryBuilderWithSelection<import("kysely/dist/cjs/parser/table-parser").From<import("../db").DatabaseSchema, "token">, "token", {}, "id" | "currentRefreshToken">;
export declare const findByQB: (db: AccountDb, search: {
    id?: number;
    code?: Code;
    tokenId?: TokenId;
    currentRefreshToken?: RefreshToken;
}) => import("kysely").SelectQueryBuilder<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").DeviceAccount>;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "token" | "account" | "actor" | "device_account", import("kysely/dist/cjs/util/type-utils").MergePartial<import("kysely/dist/cjs/util/type-utils").MergePartial<import("kysely/dist/cjs/util/type-utils").MergePartial<import("kysely/dist/cjs/util/type-utils").MergePartial<Partial<Omit<{}, never>> & Partial<Omit<Partial<Omit<{}, never>>, never>> & import("kysely").Selection<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: import("../db").DeviceAccount;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "account" | "actor", "actor.did" | "account.email" | "account.invitesDisabled" | "account.emailConfirmedAt" | "actor.handle" | "actor.createdAt" | "actor.takedownRef" | "actor.deactivatedAt" | "actor.deleteAfter"> & import("kysely").Selection<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").DeviceAccount>;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "token" | "account" | "actor" | "device_account", "device_account.authenticatedAt" | "device_account.remember" | "device_account.authorizedClients" | "token.did" | "token.code" | "token.tokenId" | "token.createdAt" | "token.updatedAt" | "token.details" | "token.deviceId" | "token.clientId" | "token.clientAuth" | "token.parameters" | "token.expiresAt" | "token.currentRefreshToken">, Partial<Omit<{}, never>> & Partial<Omit<Partial<Omit<{}, never>>, never>> & import("kysely").Selection<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: import("../db").DeviceAccount;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "account" | "actor", "actor.did" | "account.email" | "account.invitesDisabled" | "account.emailConfirmedAt" | "actor.handle" | "actor.createdAt" | "actor.takedownRef" | "actor.deactivatedAt" | "actor.deleteAfter"> & import("kysely").Selection<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").DeviceAccount>;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "token" | "account" | "actor" | "device_account", "device_account.authenticatedAt" | "device_account.remember" | "device_account.authorizedClients" | "token.did" | "token.code" | "token.tokenId" | "token.createdAt" | "token.updatedAt" | "token.details" | "token.deviceId" | "token.clientId" | "token.clientAuth" | "token.parameters" | "token.expiresAt" | "token.currentRefreshToken">>, import("kysely/dist/cjs/util/type-utils").MergePartial<Partial<Omit<{}, never>> & Partial<Omit<Partial<Omit<{}, never>>, never>> & import("kysely").Selection<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: import("../db").DeviceAccount;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "account" | "actor", "actor.did" | "account.email" | "account.invitesDisabled" | "account.emailConfirmedAt" | "actor.handle" | "actor.createdAt" | "actor.takedownRef" | "actor.deactivatedAt" | "actor.deleteAfter"> & import("kysely").Selection<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").DeviceAccount>;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "token" | "account" | "actor" | "device_account", "device_account.authenticatedAt" | "device_account.remember" | "device_account.authorizedClients" | "token.did" | "token.code" | "token.tokenId" | "token.createdAt" | "token.updatedAt" | "token.details" | "token.deviceId" | "token.clientId" | "token.clientAuth" | "token.parameters" | "token.expiresAt" | "token.currentRefreshToken">, Partial<Omit<{}, never>> & Partial<Omit<Partial<Omit<{}, never>>, never>> & import("kysely").Selection<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: import("../db").DeviceAccount;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "account" | "actor", "actor.did" | "account.email" | "account.invitesDisabled" | "account.emailConfirmedAt" | "actor.handle" | "actor.createdAt" | "actor.takedownRef" | "actor.deactivatedAt" | "actor.deleteAfter"> & import("kysely").Selection<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").DeviceAccount>;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "token" | "account" | "actor" | "device_account", "device_account.authenticatedAt" | "device_account.remember" | "device_account.authorizedClients" | "token.did" | "token.code" | "token.tokenId" | "token.createdAt" | "token.updatedAt" | "token.details" | "token.deviceId" | "token.clientId" | "token.clientAuth" | "token.parameters" | "token.expiresAt" | "token.currentRefreshToken">>>, import("kysely/dist/cjs/util/type-utils").MergePartial<import("kysely/dist/cjs/util/type-utils").MergePartial<Partial<Omit<{}, never>> & Partial<Omit<Partial<Omit<{}, never>>, never>> & import("kysely").Selection<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: import("../db").DeviceAccount;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "account" | "actor", "actor.did" | "account.email" | "account.invitesDisabled" | "account.emailConfirmedAt" | "actor.handle" | "actor.createdAt" | "actor.takedownRef" | "actor.deactivatedAt" | "actor.deleteAfter"> & import("kysely").Selection<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").DeviceAccount>;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "token" | "account" | "actor" | "device_account", "device_account.authenticatedAt" | "device_account.remember" | "device_account.authorizedClients" | "token.did" | "token.code" | "token.tokenId" | "token.createdAt" | "token.updatedAt" | "token.details" | "token.deviceId" | "token.clientId" | "token.clientAuth" | "token.parameters" | "token.expiresAt" | "token.currentRefreshToken">, Partial<Omit<{}, never>> & Partial<Omit<Partial<Omit<{}, never>>, never>> & import("kysely").Selection<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: import("../db").DeviceAccount;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "account" | "actor", "actor.did" | "account.email" | "account.invitesDisabled" | "account.emailConfirmedAt" | "actor.handle" | "actor.createdAt" | "actor.takedownRef" | "actor.deactivatedAt" | "actor.deleteAfter"> & import("kysely").Selection<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").DeviceAccount>;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "token" | "account" | "actor" | "device_account", "device_account.authenticatedAt" | "device_account.remember" | "device_account.authorizedClients" | "token.did" | "token.code" | "token.tokenId" | "token.createdAt" | "token.updatedAt" | "token.details" | "token.deviceId" | "token.clientId" | "token.clientAuth" | "token.parameters" | "token.expiresAt" | "token.currentRefreshToken">>, import("kysely/dist/cjs/util/type-utils").MergePartial<Partial<Omit<{}, never>> & Partial<Omit<Partial<Omit<{}, never>>, never>> & import("kysely").Selection<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: import("../db").DeviceAccount;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "account" | "actor", "actor.did" | "account.email" | "account.invitesDisabled" | "account.emailConfirmedAt" | "actor.handle" | "actor.createdAt" | "actor.takedownRef" | "actor.deactivatedAt" | "actor.deleteAfter"> & import("kysely").Selection<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").DeviceAccount>;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "token" | "account" | "actor" | "device_account", "device_account.authenticatedAt" | "device_account.remember" | "device_account.authorizedClients" | "token.did" | "token.code" | "token.tokenId" | "token.createdAt" | "token.updatedAt" | "token.details" | "token.deviceId" | "token.clientId" | "token.clientAuth" | "token.parameters" | "token.expiresAt" | "token.currentRefreshToken">, Partial<Omit<{}, never>> & Partial<Omit<Partial<Omit<{}, never>>, never>> & import("kysely").Selection<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: import("../db").DeviceAccount;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "account" | "actor", "actor.did" | "account.email" | "account.invitesDisabled" | "account.emailConfirmedAt" | "actor.handle" | "actor.createdAt" | "actor.takedownRef" | "actor.deactivatedAt" | "actor.deleteAfter"> & import("kysely").Selection<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").DeviceAccount>;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "token" | "account" | "actor" | "device_account", "device_account.authenticatedAt" | "device_account.remember" | "device_account.authorizedClients" | "token.did" | "token.code" | "token.tokenId" | "token.createdAt" | "token.updatedAt" | "token.details" | "token.deviceId" | "token.clientId" | "token.clientAuth" | "token.parameters" | "token.expiresAt" | "token.currentRefreshToken">>>>, import("kysely/dist/cjs/util/type-utils").MergePartial<import("kysely/dist/cjs/util/type-utils").MergePartial<import("kysely/dist/cjs/util/type-utils").MergePartial<Partial<Omit<{}, never>> & Partial<Omit<Partial<Omit<{}, never>>, never>> & import("kysely").Selection<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: import("../db").DeviceAccount;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "account" | "actor", "actor.did" | "account.email" | "account.invitesDisabled" | "account.emailConfirmedAt" | "actor.handle" | "actor.createdAt" | "actor.takedownRef" | "actor.deactivatedAt" | "actor.deleteAfter"> & import("kysely").Selection<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").DeviceAccount>;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "token" | "account" | "actor" | "device_account", "device_account.authenticatedAt" | "device_account.remember" | "device_account.authorizedClients" | "token.did" | "token.code" | "token.tokenId" | "token.createdAt" | "token.updatedAt" | "token.details" | "token.deviceId" | "token.clientId" | "token.clientAuth" | "token.parameters" | "token.expiresAt" | "token.currentRefreshToken">, Partial<Omit<{}, never>> & Partial<Omit<Partial<Omit<{}, never>>, never>> & import("kysely").Selection<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: import("../db").DeviceAccount;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "account" | "actor", "actor.did" | "account.email" | "account.invitesDisabled" | "account.emailConfirmedAt" | "actor.handle" | "actor.createdAt" | "actor.takedownRef" | "actor.deactivatedAt" | "actor.deleteAfter"> & import("kysely").Selection<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").DeviceAccount>;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "token" | "account" | "actor" | "device_account", "device_account.authenticatedAt" | "device_account.remember" | "device_account.authorizedClients" | "token.did" | "token.code" | "token.tokenId" | "token.createdAt" | "token.updatedAt" | "token.details" | "token.deviceId" | "token.clientId" | "token.clientAuth" | "token.parameters" | "token.expiresAt" | "token.currentRefreshToken">>, import("kysely/dist/cjs/util/type-utils").MergePartial<Partial<Omit<{}, never>> & Partial<Omit<Partial<Omit<{}, never>>, never>> & import("kysely").Selection<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: import("../db").DeviceAccount;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "account" | "actor", "actor.did" | "account.email" | "account.invitesDisabled" | "account.emailConfirmedAt" | "actor.handle" | "actor.createdAt" | "actor.takedownRef" | "actor.deactivatedAt" | "actor.deleteAfter"> & import("kysely").Selection<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").DeviceAccount>;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "token" | "account" | "actor" | "device_account", "device_account.authenticatedAt" | "device_account.remember" | "device_account.authorizedClients" | "token.did" | "token.code" | "token.tokenId" | "token.createdAt" | "token.updatedAt" | "token.details" | "token.deviceId" | "token.clientId" | "token.clientAuth" | "token.parameters" | "token.expiresAt" | "token.currentRefreshToken">, Partial<Omit<{}, never>> & Partial<Omit<Partial<Omit<{}, never>>, never>> & import("kysely").Selection<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: import("../db").DeviceAccount;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "account" | "actor", "actor.did" | "account.email" | "account.invitesDisabled" | "account.emailConfirmedAt" | "actor.handle" | "actor.createdAt" | "actor.takedownRef" | "actor.deactivatedAt" | "actor.deleteAfter"> & import("kysely").Selection<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").DeviceAccount>;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "token" | "account" | "actor" | "device_account", "device_account.authenticatedAt" | "device_account.remember" | "device_account.authorizedClients" | "token.did" | "token.code" | "token.tokenId" | "token.createdAt" | "token.updatedAt" | "token.details" | "token.deviceId" | "token.clientId" | "token.clientAuth" | "token.parameters" | "token.expiresAt" | "token.currentRefreshToken">>>, import("kysely/dist/cjs/util/type-utils").MergePartial<import("kysely/dist/cjs/util/type-utils").MergePartial<Partial<Omit<{}, never>> & Partial<Omit<Partial<Omit<{}, never>>, never>> & import("kysely").Selection<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: import("../db").DeviceAccount;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "account" | "actor", "actor.did" | "account.email" | "account.invitesDisabled" | "account.emailConfirmedAt" | "actor.handle" | "actor.createdAt" | "actor.takedownRef" | "actor.deactivatedAt" | "actor.deleteAfter"> & import("kysely").Selection<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").DeviceAccount>;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "token" | "account" | "actor" | "device_account", "device_account.authenticatedAt" | "device_account.remember" | "device_account.authorizedClients" | "token.did" | "token.code" | "token.tokenId" | "token.createdAt" | "token.updatedAt" | "token.details" | "token.deviceId" | "token.clientId" | "token.clientAuth" | "token.parameters" | "token.expiresAt" | "token.currentRefreshToken">, Partial<Omit<{}, never>> & Partial<Omit<Partial<Omit<{}, never>>, never>> & import("kysely").Selection<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: import("../db").DeviceAccount;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "account" | "actor", "actor.did" | "account.email" | "account.invitesDisabled" | "account.emailConfirmedAt" | "actor.handle" | "actor.createdAt" | "actor.takedownRef" | "actor.deactivatedAt" | "actor.deleteAfter"> & import("kysely").Selection<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").DeviceAccount>;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "token" | "account" | "actor" | "device_account", "device_account.authenticatedAt" | "device_account.remember" | "device_account.authorizedClients" | "token.did" | "token.code" | "token.tokenId" | "token.createdAt" | "token.updatedAt" | "token.details" | "token.deviceId" | "token.clientId" | "token.clientAuth" | "token.parameters" | "token.expiresAt" | "token.currentRefreshToken">>, import("kysely/dist/cjs/util/type-utils").MergePartial<Partial<Omit<{}, never>> & Partial<Omit<Partial<Omit<{}, never>>, never>> & import("kysely").Selection<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: import("../db").DeviceAccount;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "account" | "actor", "actor.did" | "account.email" | "account.invitesDisabled" | "account.emailConfirmedAt" | "actor.handle" | "actor.createdAt" | "actor.takedownRef" | "actor.deactivatedAt" | "actor.deleteAfter"> & import("kysely").Selection<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").DeviceAccount>;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "token" | "account" | "actor" | "device_account", "device_account.authenticatedAt" | "device_account.remember" | "device_account.authorizedClients" | "token.did" | "token.code" | "token.tokenId" | "token.createdAt" | "token.updatedAt" | "token.details" | "token.deviceId" | "token.clientId" | "token.clientAuth" | "token.parameters" | "token.expiresAt" | "token.currentRefreshToken">, Partial<Omit<{}, never>> & Partial<Omit<Partial<Omit<{}, never>>, never>> & import("kysely").Selection<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: import("../db").DeviceAccount;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "account" | "actor", "actor.did" | "account.email" | "account.invitesDisabled" | "account.emailConfirmedAt" | "actor.handle" | "actor.createdAt" | "actor.takedownRef" | "actor.deactivatedAt" | "actor.deleteAfter"> & import("kysely").Selection<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").DeviceAccount>;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "token" | "account" | "actor" | "device_account", "device_account.authenticatedAt" | "device_account.remember" | "device_account.authorizedClients" | "token.did" | "token.code" | "token.tokenId" | "token.createdAt" | "token.updatedAt" | "token.details" | "token.deviceId" | "token.clientId" | "token.clientAuth" | "token.parameters" | "token.expiresAt" | "token.currentRefreshToken">>>>>>;
export declare const removeByDidQB: (db: AccountDb, did: string) => import("kysely").DeleteQueryBuilder<import("kysely/dist/cjs/parser/table-parser").From<import("../db").DatabaseSchema, "token">, "token", import("kysely").DeleteResult>;
export declare const rotateQB: (db: AccountDb, id: number, newTokenId: TokenId, newRefreshToken: RefreshToken, newData: NewTokenData) => import("kysely").UpdateQueryBuilder<import("kysely/dist/cjs/parser/table-parser").From<import("../db").DatabaseSchema, "token">, "token", "token", import("kysely").UpdateResult>;
export declare const removeQB: (db: AccountDb, tokenId: TokenId) => import("kysely").DeleteQueryBuilder<import("kysely/dist/cjs/parser/table-parser").From<import("../db").DatabaseSchema, "token">, "token", import("kysely").DeleteResult>;
export {};
//# sourceMappingURL=token.d.ts.map