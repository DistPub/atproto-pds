import { Account, DeviceAccountInfo, DeviceId, OAuthClientId } from '@atproto/oauth-provider';
import { Selectable } from 'kysely';
import { AccountDb } from '../db';
import { DeviceAccount } from '../db/schema/device-account';
import { ActorAccount } from './account';
export type SelectableDeviceAccount = Pick<Selectable<DeviceAccount>, 'authenticatedAt' | 'authorizedClients' | 'remember'>;
export type InsertableField = {
    authenticatedAt: Date;
    authorizedClients: OAuthClientId[];
    remember: boolean;
};
export declare function toDeviceAccountInfo(row: SelectableDeviceAccount): DeviceAccountInfo;
export declare function toAccount(row: Selectable<ActorAccount>, audience: string): Account;
export declare const readQB: (db: AccountDb, deviceId: DeviceId, did: string) => import("kysely/dist/cjs/parser/select-parser").QueryBuilderWithSelection<import("kysely/dist/cjs/parser/table-parser").From<import("../db").DatabaseSchema, "device_account">, "device_account", {}, "authenticatedAt" | "remember" | "authorizedClients">;
export declare const updateQB: (db: AccountDb, deviceId: DeviceId, did: string, entry: {
    authenticatedAt?: Date;
    authorizedClients?: OAuthClientId[];
    remember?: boolean;
}) => import("kysely").UpdateQueryBuilder<import("kysely/dist/cjs/parser/table-parser").From<import("../db").DatabaseSchema, "device_account">, "device_account", "device_account", import("kysely").UpdateResult>;
export declare const createOrUpdateQB: (db: AccountDb, deviceId: DeviceId, did: string, remember: boolean) => import("kysely").InsertQueryBuilder<import("../db").DatabaseSchema, "device_account", import("kysely").InsertResult>;
export declare const getAccountInfoQB: (db: AccountDb, deviceId: DeviceId, did: string) => import("kysely").SelectQueryBuilder<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: import("../db").Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: DeviceAccount;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "account" | "actor" | "device" | "device_account", Partial<Omit<{}, never>> & Partial<Omit<Partial<Omit<{}, never>>, never>> & import("kysely").Selection<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: import("../db").Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: DeviceAccount;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "account" | "actor", "actor.did" | "account.email" | "account.invitesDisabled" | "account.emailConfirmedAt" | "actor.handle" | "actor.createdAt" | "actor.takedownRef" | "actor.deactivatedAt" | "actor.deleteAfter"> & import("kysely").Selection<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: import("../db").Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: DeviceAccount;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "account" | "actor" | "device" | "device_account", "device_account.authenticatedAt" | "device_account.remember" | "device_account.authorizedClients">>;
export declare const listRememberedQB: (db: AccountDb, deviceId: DeviceId) => import("kysely").SelectQueryBuilder<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: import("../db").Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: DeviceAccount;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "account" | "actor" | "device" | "device_account", Partial<Omit<{}, never>> & Partial<Omit<Partial<Omit<{}, never>>, never>> & import("kysely").Selection<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: import("../db").Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: DeviceAccount;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "account" | "actor", "actor.did" | "account.email" | "account.invitesDisabled" | "account.emailConfirmedAt" | "actor.handle" | "actor.createdAt" | "actor.takedownRef" | "actor.deactivatedAt" | "actor.deleteAfter"> & import("kysely").Selection<{
    account: import("kysely/dist/cjs/util/type-utils").Nullable<import("../db").Account>;
    token: import("../db").Token;
    actor: import("../db").Actor;
    device: import("../db").Device;
    device_account: DeviceAccount;
    authorization_request: import("../db").AuthorizationRequest;
    used_refresh_token: import("../db").UsedRefreshToken;
    repo_root: import("../db").RepoRoot;
    refresh_token: import("../db").RefreshToken;
    app_password: import("../db").AppPassword;
    invite_code: import("../db").InviteCode;
    invite_code_use: import("../db").InviteCodeUse;
    email_token: import("../db").EmailToken;
}, "account" | "actor" | "device" | "device_account", "device_account.authenticatedAt" | "device_account.remember" | "device_account.authorizedClients">>;
export declare const removeQB: (db: AccountDb, deviceId: DeviceId, did: string) => import("kysely").DeleteQueryBuilder<import("kysely/dist/cjs/parser/table-parser").From<import("../db").DatabaseSchema, "device_account">, "device_account", import("kysely").DeleteResult>;
//# sourceMappingURL=device-account.d.ts.map